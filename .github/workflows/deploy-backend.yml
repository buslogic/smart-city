name: Deploy Backend to Production

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  # First check if Prisma validation is needed and run it
  prisma-check:
    uses: ./.github/workflows/validate-prisma-check.yml

  # Build and push Docker image
  build:
    needs: prisma-check
    # Only build if Prisma validation passed or wasn't required
    if: needs.prisma-check.outputs.validation-required == 'false' || needs.prisma-check.outputs.validation-passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Prepare SSH keys for build
        run: |
          mkdir -p ./apps/backend/.ssh
          echo "${{ secrets.LEGACY_SSH_KEY }}" > ./apps/backend/.ssh/gsp-to-legacy
          echo "${{ secrets.LEGACY_SSH_KEY_PUB }}" > ./apps/backend/.ssh/gsp-to-legacy.pub
          echo "${{ secrets.LEGACY_KNOWN_HOSTS }}" > ./apps/backend/.ssh/known_hosts
          chmod 600 ./apps/backend/.ssh/gsp-to-legacy
          chmod 644 ./apps/backend/.ssh/gsp-to-legacy.pub ./apps/backend/.ssh/known_hosts

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/backend
          push: true
          tags: registry.digitalocean.com/smart-city/backend:latest,registry.digitalocean.com/smart-city/backend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/smart-city/backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/smart-city/backend:buildcache,mode=max

  # Deploy to production server
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull registry.digitalocean.com/smart-city/backend:latest

            # Stop and remove old container
            docker stop backend-app || true
            docker rm backend-app || true

            # Start new container (bez SSH mount-a - veƒá je u image-u)
            docker run -d \
              --name backend-app \
              --restart unless-stopped \
              --network host \
              --env-file /root/apps/backend/.env.production \
              -v /root/apps/backend/uploads:/app/uploads \
              --health-cmd="curl -f http://localhost:3010/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              registry.digitalocean.com/smart-city/backend:latest

            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            sleep 10

            # Check if container is running
            docker ps | grep backend-app

            # Run database migrations
            echo "Running database migrations..."
            docker exec backend-app npx prisma migrate deploy || echo "Migration might have failed, but continuing..."

            # Clean up old images
            docker image prune -f

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 20
          curl -f https://api.smart-city.rs/health || echo "Warning: Health check failed, but container may still be starting"
          echo "‚úÖ Deployment completed!"

      - name: Send notification on success
        if: success()
        run: |
          echo "‚úÖ Backend deployed successfully to production!"
          echo "üìç API URL: https://api.smart-city.rs"
          echo "üîÑ Image: registry.digitalocean.com/smart-city/backend:${{ github.sha }}"

      - name: Send notification on failure
        if: failure()
        run: |
          echo "‚ùå Backend deployment failed!"
          echo "Please check the logs for more information."