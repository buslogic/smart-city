name: Deploy Backend to Production

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  # First check if Prisma validation is needed and run it
  prisma-check:
    uses: ./.github/workflows/validate-prisma-check.yml

  # Validation job - validates against production database
  validate-production:
    needs: prisma-check
    # Only run if Prisma validation passed or wasn't required
    if: needs.prisma-check.outputs.validation-required == 'false' || needs.prisma-check.outputs.validation-passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for production database validation
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Validate on Production Server Database
        env:
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          echo "üîç Validating migrations against production database..."
          ssh -i ~/.ssh/deploy_key $USER@$HOST << 'EOF'
            set -e

            # Use the backend container
            CONTAINER="backend-app"
            echo "üìã Using container: $CONTAINER"

            # Check migration status on production using Docker
            echo "üìã Checking migration status on production database..."
            docker exec $CONTAINER npx prisma migrate status || {
              echo "‚ùå Migration check failed on production database!"
              echo "‚ö†Ô∏è  There are pending migrations or schema drift."
              echo "üìù Please review and apply migrations manually if needed."
              exit 1
            }

            echo "‚úÖ Migration validation successful on production database!"
          EOF

  deploy:
    needs: [prisma-check, validate-production]
    # Only deploy if all validations passed
    if: |
      always() &&
      (needs.prisma-check.outputs.validation-required == 'false' || needs.prisma-check.outputs.validation-passed == 'true') &&
      needs.validate-production.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          echo "SSH setup completed"

      - name: Deploy to Production
        env:
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          echo "üöÄ Starting deployment to production server..."

          # Copy simple deployment script to server
          scp -i ~/.ssh/id_rsa scripts/deploy-backend-simple.sh $USER@$HOST:/root/scripts/

          # SSH to server and execute deployment script
          ssh -i ~/.ssh/id_rsa $USER@$HOST << 'ENDSSH'
            set -e
            chmod +x /root/scripts/deploy-backend-simple.sh
            /root/scripts/deploy-backend-simple.sh
          ENDSSH

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 10
          curl -f https://api.smart-city.rs/health || echo "Warning: Health check failed, but deployment may still be successful"
          echo "‚úÖ Deployment verification completed!"

      - name: Send notification on success
        if: success()
        run: |
          echo "‚úÖ Backend deployed successfully to production!"
          echo "üìç API URL: https://api.smart-city.rs"

      - name: Send notification on failure
        if: failure()
        run: |
          echo "‚ùå Backend deployment failed!"
          echo "Please check the logs for more information."