import axios from 'axios';
import { TokenManager } from '../utils/token';
import { API_URL } from '../config/runtime';

const BASE_URL = `${API_URL}/api/turnus-defaults`;

export type DayOfWeek =
  | 'Ponedeljak'
  | 'Utorak'
  | 'Sreda'
  | 'Četvrtak'
  | 'Petak'
  | 'Subota'
  | 'Nedelja';

export const DAYS_OF_WEEK: DayOfWeek[] = [
  'Ponedeljak',
  'Utorak',
  'Sreda',
  'Četvrtak',
  'Petak',
  'Subota',
  'Nedelja',
];

export type DataSource = 'mysql' | 'legacy';

export interface TurnusDefault {
  id: number;
  driverId: number;
  turnusName: string;
  lineNumberForDisplay: string | null;
  shiftNumber: number | null;
  dayOfWeek: DayOfWeek | null;
  priority: number;
  isActive: boolean;
  usageCount: number;
  usagePercentage: number | string; // Prisma Decimal can be string or number
  lastUsedDate: string | null;
  autoGenerated: boolean;
  confidenceScore: number | string; // Prisma Decimal can be string or number
  note: string | null;
  createdAt: string;
  updatedAt: string;
  createdBy: number | null;
  updatedBy: number | null;
  driver: {
    id: number;
    firstName: string;
    lastName: string;
    email: string;
  };
  creator?: {
    id: number;
    firstName: string;
    lastName: string;
  };
  updater?: {
    id: number;
    firstName: string;
    lastName: string;
  };
}

export interface CreateTurnusDefaultDto {
  driverId: number;
  turnusName: string;
  lineNumberForDisplay?: string;
  shiftNumber?: number;
  dayOfWeek?: DayOfWeek;
  priority?: number;
  isActive?: boolean;
  note?: string;
}

export interface UpdateTurnusDefaultDto extends Partial<CreateTurnusDefaultDto> {
  usageCount?: number;
  usagePercentage?: number | string;
  confidenceScore?: number | string;
}

export interface FindTurnusDefaultsParams {
  driverId?: number;
  turnusName?: string;
  lineNumberForDisplay?: string;
  shiftNumber?: number;
  dayOfWeek?: DayOfWeek;
  isActive?: boolean;
  autoGenerated?: boolean;
}

export interface AnalyzeHistoryDto {
  driverId?: number;
  driverIds?: number[];
  startDate: string;
  endDate: string;
  minUsageCount?: number;
  minConfidenceScore?: number;
  source?: DataSource;
  legacyDatabaseId?: number;
  lineNumber?: string;
}

export interface LegacyDatabase {
  id: number;
  name: string;
  type: string;
  host: string;
  port: number;
  database: string;
  username: string;
  isActive: boolean;
  testConnection: boolean;
  description?: string;
}

export interface HistoryAnalysisResult {
  driverId: number;
  driverName: string;
  turnusName: string;
  lineNumber: string | null;
  shiftNumber: number | null;
  dayOfWeek: DayOfWeek | null;
  usageCount: number;
  usagePercentage: number | string;
  confidenceScore: number | string;
  recommendation: string;
}

export interface GenerateDefaultsResponse {
  success: boolean;
  analyzed: number;
  created: number;
  skipped: number;
  details: {
    created: any[];
    skipped: any[];
  };
}

class TurnusDefaultsService {
  private getAuthHeaders() {
    const token = TokenManager.getAccessToken();
    return {
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    };
  }

  async getAll(params?: FindTurnusDefaultsParams): Promise<TurnusDefault[]> {
    const response = await axios.get<TurnusDefault[]>(BASE_URL, {
      params,
      headers: this.getAuthHeaders(),
    });
    return response.data;
  }

  async getOne(id: number): Promise<TurnusDefault> {
    const response = await axios.get<TurnusDefault>(`${BASE_URL}/${id}`, {
      headers: this.getAuthHeaders(),
    });
    return response.data;
  }

  async getBestMatch(
    driverId: number,
    lineNumber?: string,
    shiftNumber?: number,
    dayOfWeek?: DayOfWeek,
  ): Promise<TurnusDefault | null> {
    const response = await axios.get<TurnusDefault | null>(
      `${BASE_URL}/driver/${driverId}/best-match`,
      {
        params: { lineNumber, shiftNumber, dayOfWeek },
        headers: this.getAuthHeaders(),
      },
    );
    return response.data;
  }

  async create(data: CreateTurnusDefaultDto): Promise<TurnusDefault> {
    const response = await axios.post<TurnusDefault>(BASE_URL, data, {
      headers: this.getAuthHeaders(),
    });
    return response.data;
  }

  async update(id: number, data: UpdateTurnusDefaultDto): Promise<TurnusDefault> {
    const response = await axios.patch<TurnusDefault>(`${BASE_URL}/${id}`, data, {
      headers: this.getAuthHeaders(),
    });
    return response.data;
  }

  async delete(id: number): Promise<{ success: boolean; message: string }> {
    const response = await axios.delete<{ success: boolean; message: string }>(
      `${BASE_URL}/${id}`,
      {
        headers: this.getAuthHeaders(),
      },
    );
    return response.data;
  }

  async analyzeHistory(data: AnalyzeHistoryDto): Promise<HistoryAnalysisResult[]> {
    const response = await axios.post<HistoryAnalysisResult[]>(
      `${BASE_URL}/analyze-history`,
      data,
      {
        headers: this.getAuthHeaders(),
      },
    );
    return response.data;
  }

  async generateDefaults(data: AnalyzeHistoryDto): Promise<GenerateDefaultsResponse> {
    const response = await axios.post<GenerateDefaultsResponse>(
      `${BASE_URL}/generate-defaults`,
      data,
      {
        headers: this.getAuthHeaders(),
      },
    );
    return response.data;
  }

  async getLines(): Promise<string[]> {
    const response = await axios.get<string[]>(`${BASE_URL}/lines`, {
      headers: this.getAuthHeaders(),
    });
    return response.data;
  }

  async getLegacyDatabases(): Promise<LegacyDatabase[]> {
    const response = await axios.get<LegacyDatabase[]>(
      `${API_URL}/api/legacy-databases`,
      {
        headers: this.getAuthHeaders(),
      },
    );
    return response.data;
  }
}

export const turnusDefaultsService = new TurnusDefaultsService();
