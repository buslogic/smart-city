import React, { useState, useEffect } from 'react';
import {
  Card,
  Typography,
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  Select,
  InputNumber,
  Switch,
  message,
  Popconfirm,
  Tooltip,
  Badge,
  Row,
  Col,
  DatePicker,
  Statistic,
  Alert,
  Spin,
  Progress,
} from 'antd';
import {
  UserOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  ReloadOutlined,
  BarChartOutlined,
  RobotOutlined,
  FilterOutlined,
  LoadingOutlined,
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';
import {
  turnusDefaultsService,
  TurnusDefault,
  CreateTurnusDefaultDto,
  DayOfWeek,
  DAYS_OF_WEEK,
  AnalyzeHistoryDto,
  HistoryAnalysisResult,
  DataSource,
  LegacyDatabase,
} from '../../../services/turnus-defaults.service';
import { planningService, Driver } from '../../../services/planning.service';

const { Title, Text } = Typography;
const { Option } = Select;
const { RangePicker } = DatePicker;

const TurnusDefaults: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [defaults, setDefaults] = useState<TurnusDefault[]>([]);
  const [filteredDefaults, setFilteredDefaults] = useState<TurnusDefault[]>([]);
  const [drivers, setDrivers] = useState<Driver[]>([]);
  const [lines, setLines] = useState<string[]>([]);
  const [legacyDatabases, setLegacyDatabases] = useState<LegacyDatabase[]>([]);
  const [selectedSource, setSelectedSource] = useState<DataSource>('mysql');

  // Filters
  const [selectedDriver, setSelectedDriver] = useState<number | undefined>();
  const [showActiveOnly, setShowActiveOnly] = useState(true);
  const [showAutoGeneratedOnly, setShowAutoGeneratedOnly] = useState<boolean | undefined>();

  // Modals
  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [isAnalyzeModalVisible, setIsAnalyzeModalVisible] = useState(false);
  const [isGenerateModalVisible, setIsGenerateModalVisible] = useState(false);
  const [isAnalysisResultsVisible, setIsAnalysisResultsVisible] = useState(false);
  const [editingDefault, setEditingDefault] = useState<TurnusDefault | null>(null);
  const [analysisResults, setAnalysisResults] = useState<HistoryAnalysisResult[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingStatus, setProcessingStatus] = useState<string>('');

  // Forms
  const [createForm] = Form.useForm();
  const [editForm] = Form.useForm();
  const [analyzeForm] = Form.useForm();
  const [generateForm] = Form.useForm();

  useEffect(() => {
    fetchDefaults();
    fetchDrivers();
    fetchLines();
    fetchLegacyDatabases();
  }, []);

  useEffect(() => {
    applyFilters();
  }, [defaults, selectedDriver, showActiveOnly, showAutoGeneratedOnly]);

  const fetchDefaults = async () => {
    try {
      setLoading(true);
      const data = await turnusDefaultsService.getAll();
      setDefaults(data);
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri učitavanju defaults');
    } finally {
      setLoading(false);
    }
  };

  const fetchDrivers = async () => {
    try {
      const data = await planningService.getDrivers();
      setDrivers(data);
    } catch (error: any) {
      message.error('Greška pri učitavanju vozača');
    }
  };

  const fetchLines = async () => {
    try {
      const data = await turnusDefaultsService.getLines();
      setLines(data);
    } catch (error: any) {
      message.error('Greška pri učitavanju linija');
    }
  };

  const fetchLegacyDatabases = async () => {
    try {
      const data = await turnusDefaultsService.getLegacyDatabases();
      setLegacyDatabases(data.filter((db) => db.isActive));
    } catch (error: any) {
      message.error('Greška pri učitavanju legacy baza');
    }
  };

  const applyFilters = () => {
    let filtered = [...defaults];

    if (selectedDriver) {
      filtered = filtered.filter((d) => d.driverId === selectedDriver);
    }

    if (showActiveOnly) {
      filtered = filtered.filter((d) => d.isActive);
    }

    if (showAutoGeneratedOnly !== undefined) {
      filtered = filtered.filter((d) => d.autoGenerated === showAutoGeneratedOnly);
    }

    setFilteredDefaults(filtered);
  };

  const handleCreate = async (values: CreateTurnusDefaultDto) => {
    try {
      await turnusDefaultsService.create(values);
      message.success('Default turnus uspešno kreiran');
      setIsCreateModalVisible(false);
      createForm.resetFields();
      fetchDefaults();
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri kreiranju');
    }
  };

  const handleEdit = async (values: CreateTurnusDefaultDto) => {
    if (!editingDefault) return;
    try {
      await turnusDefaultsService.update(editingDefault.id, values);
      message.success('Default turnus uspešno ažuriran');
      setIsEditModalVisible(false);
      setEditingDefault(null);
      editForm.resetFields();
      fetchDefaults();
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri ažuriranju');
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await turnusDefaultsService.delete(id);
      message.success('Default turnus uspešno obrisan');
      fetchDefaults();
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri brisanju');
    }
  };

  const handleAnalyze = async (values: any) => {
    try {
      setIsProcessing(true);
      setProcessingStatus('Povezivanje sa bazom podataka...');
      setIsAnalyzeModalVisible(false);

      const dto: AnalyzeHistoryDto = {
        startDate: values.dateRange[0].format('YYYY-MM-DD'),
        endDate: values.dateRange[1].format('YYYY-MM-DD'),
        driverId: values.driverId,
        minUsageCount: values.minUsageCount || 5,
        minConfidenceScore: values.minConfidenceScore || 70,
        source: values.source || 'mysql',
        legacyDatabaseId: values.legacyDatabaseId,
        lineNumber: values.lineNumber,
      };

      setProcessingStatus('Analiziram istoriju vožnji...');
      const results = await turnusDefaultsService.analyzeHistory(dto);

      setProcessingStatus('Analiza završena!');
      setAnalysisResults(results);
      setIsAnalysisResultsVisible(true);
      analyzeForm.resetFields();
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri analizi');
    } finally {
      setIsProcessing(false);
      setProcessingStatus('');
    }
  };

  const handleGenerate = async (values: any) => {
    try {
      setIsProcessing(true);
      setProcessingStatus('Povezivanje sa bazom podataka...');
      setIsGenerateModalVisible(false);

      const dto: AnalyzeHistoryDto = {
        startDate: values.dateRange[0].format('YYYY-MM-DD'),
        endDate: values.dateRange[1].format('YYYY-MM-DD'),
        driverId: values.driverId,
        minUsageCount: values.minUsageCount || 5,
        minConfidenceScore: values.minConfidenceScore || 70,
        source: values.source || 'mysql',
        legacyDatabaseId: values.legacyDatabaseId,
        lineNumber: values.lineNumber,
      };

      setProcessingStatus('Analiziram istoriju vožnji...');
      await new Promise(resolve => setTimeout(resolve, 1000)); // Daj malo vremena da se prikaz ažurira

      setProcessingStatus('Kreiram turnus defaults...');
      const result = await turnusDefaultsService.generateDefaults(dto);

      setProcessingStatus('Završeno!');

      Modal.success({
        title: 'Auto-generisanje završeno',
        width: 600,
        content: (
          <div>
            <p><strong>Analizirano:</strong> {result.analyzed} kandidata</p>
            <p><strong>Kreirano:</strong> {result.created} defaults</p>
            <p><strong>Preskočeno:</strong> {result.skipped} (već postoji ili greška)</p>
          </div>
        ),
      });

      generateForm.resetFields();
      fetchDefaults();
    } catch (error: any) {
      message.error(error.response?.data?.message || 'Greška pri generisanju');
    } finally {
      setIsProcessing(false);
      setProcessingStatus('');
    }
  };

  const openEditModal = (record: TurnusDefault) => {
    setEditingDefault(record);
    editForm.setFieldsValue({
      driverId: record.driverId,
      turnusName: record.turnusName,
      lineNumberForDisplay: record.lineNumberForDisplay,
      shiftNumber: record.shiftNumber,
      dayOfWeek: record.dayOfWeek,
      priority: record.priority,
      isActive: record.isActive,
      note: record.note,
    });
    setIsEditModalVisible(true);
  };

  const getPriorityColor = (priority: number): string => {
    if (priority <= 30) return 'green';
    if (priority <= 70) return 'blue';
    if (priority <= 120) return 'orange';
    return 'default';
  };

  const getPriorityLabel = (priority: number): string => {
    if (priority === 10) return 'Nivo 1 (Najviši)';
    if (priority === 30) return 'Nivo 2';
    if (priority === 50) return 'Nivo 3';
    if (priority === 70) return 'Nivo 4';
    if (priority === 100) return 'Nivo 5';
    if (priority === 120) return 'Nivo 6';
    if (priority === 140) return 'Nivo 7';
    if (priority === 200) return 'Nivo 8 (Fallback)';
    return `Custom (${priority})`;
  };

  const columns: ColumnsType<TurnusDefault> = [
    {
      title: 'Vozač',
      dataIndex: ['driver', 'firstName'],
      key: 'driver',
      render: (_, record) => (
        <div>
          <div className="font-medium">
            {record.driver.firstName} {record.driver.lastName}
          </div>
          <Text type="secondary" className="text-xs">
            ID: {record.driverId}
          </Text>
        </div>
      ),
      sorter: (a, b) => a.driver.lastName.localeCompare(b.driver.lastName),
    },
    {
      title: 'Turnus',
      dataIndex: 'turnusName',
      key: 'turnusName',
      sorter: (a, b) => a.turnusName.localeCompare(b.turnusName),
    },
    {
      title: 'Linija',
      dataIndex: 'lineNumberForDisplay',
      key: 'lineNumberForDisplay',
      render: (line) => line || <Text type="secondary">Sve</Text>,
      sorter: (a, b) => (a.lineNumberForDisplay || '').localeCompare(b.lineNumberForDisplay || ''),
    },
    {
      title: 'Smena',
      dataIndex: 'shiftNumber',
      key: 'shiftNumber',
      render: (shift) => shift || <Text type="secondary">Sve</Text>,
      sorter: (a, b) => (a.shiftNumber || 0) - (b.shiftNumber || 0),
    },
    {
      title: 'Dan',
      dataIndex: 'dayOfWeek',
      key: 'dayOfWeek',
      render: (day) => day || <Text type="secondary">Svi</Text>,
    },
    {
      title: 'Prioritet',
      dataIndex: 'priority',
      key: 'priority',
      render: (priority) => (
        <Tooltip title={getPriorityLabel(priority)}>
          <Tag color={getPriorityColor(priority)}>{priority}</Tag>
        </Tooltip>
      ),
      sorter: (a, b) => a.priority - b.priority,
    },
    {
      title: 'Statistika',
      key: 'stats',
      render: (_, record) => {
        const usagePercentage = Number(record.usagePercentage);
        const confidenceScore = Number(record.confidenceScore);

        return (
          <div className="text-xs">
            <div>Korišćeno: {record.usageCount}x</div>
            <div>Postotak: {usagePercentage.toFixed(1)}%</div>
            <div>
              Confidence:{' '}
              <Tag color={confidenceScore >= 80 ? 'green' : confidenceScore >= 60 ? 'orange' : 'red'}>
                {confidenceScore.toFixed(0)}%
              </Tag>
            </div>
          </div>
        );
      },
    },
    {
      title: 'Status',
      key: 'status',
      render: (_, record) => (
        <Space direction="vertical" size="small">
          {record.isActive ? (
            <Tag color="green">Aktivan</Tag>
          ) : (
            <Tag color="red">Neaktivan</Tag>
          )}
          {record.autoGenerated && (
            <Tag icon={<RobotOutlined />} color="purple">
              Auto
            </Tag>
          )}
        </Space>
      ),
    },
    {
      title: 'Akcije',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Tooltip title="Izmeni">
            <Button
              type="text"
              icon={<EditOutlined />}
              onClick={() => openEditModal(record)}
              size="small"
            />
          </Tooltip>
          <Popconfirm
            title="Brisanje default turnusa"
            description="Da li ste sigurni da želite da obrišete ovaj default?"
            onConfirm={() => handleDelete(record.id)}
            okText="Da"
            cancelText="Ne"
          >
            <Tooltip title="Obriši">
              <Button type="text" danger icon={<DeleteOutlined />} size="small" />
            </Tooltip>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const analysisColumns: ColumnsType<HistoryAnalysisResult> = [
    {
      title: 'Vozač',
      dataIndex: 'driverName',
      key: 'driverName',
    },
    {
      title: 'Turnus',
      dataIndex: 'turnusName',
      key: 'turnusName',
    },
    {
      title: 'Linija',
      dataIndex: 'lineNumber',
      key: 'lineNumber',
      render: (line) => line || <Text type="secondary">-</Text>,
    },
    {
      title: 'Smena',
      dataIndex: 'shiftNumber',
      key: 'shiftNumber',
      render: (shift) => shift || <Text type="secondary">-</Text>,
    },
    {
      title: 'Dan',
      dataIndex: 'dayOfWeek',
      key: 'dayOfWeek',
      render: (day) => day || <Text type="secondary">-</Text>,
    },
    {
      title: 'Korišćenja',
      dataIndex: 'usageCount',
      key: 'usageCount',
      sorter: (a, b) => a.usageCount - b.usageCount,
    },
    {
      title: 'Postotak',
      dataIndex: 'usagePercentage',
      key: 'usagePercentage',
      render: (percentage) => `${Number(percentage).toFixed(1)}%`,
      sorter: (a, b) => Number(a.usagePercentage) - Number(b.usagePercentage),
    },
    {
      title: 'Confidence',
      dataIndex: 'confidenceScore',
      key: 'confidenceScore',
      render: (score) => {
        const confidenceScore = Number(score);
        return (
          <Tag color={confidenceScore >= 80 ? 'green' : confidenceScore >= 60 ? 'orange' : 'red'}>
            {confidenceScore.toFixed(0)}%
          </Tag>
        );
      },
      sorter: (a, b) => Number(a.confidenceScore) - Number(b.confidenceScore),
    },
    {
      title: 'Preporuka',
      dataIndex: 'recommendation',
      key: 'recommendation',
      render: (rec) => {
        let color = 'default';
        if (rec.includes('VISOKA')) color = 'green';
        else if (rec.includes('PREPORUČENO')) color = 'blue';
        else if (rec.includes('UMJERENA')) color = 'orange';
        else if (rec.includes('NISKA')) color = 'red';
        return <Tag color={color}>{rec}</Tag>;
      },
    },
  ];

  return (
    <div className="p-6">
      <Card>
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <UserOutlined className="text-2xl text-blue-500" />
            <Title level={2} className="mb-0">
              Default Turnusa po Vozačima
            </Title>
          </div>
          <Space>
            <Button
              icon={<BarChartOutlined />}
              onClick={() => setIsAnalyzeModalVisible(true)}
            >
              Analiziraj Istoriju
            </Button>
            <Button
              type="primary"
              icon={<RobotOutlined />}
              onClick={() => setIsGenerateModalVisible(true)}
            >
              Auto-Generiši
            </Button>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => setIsCreateModalVisible(true)}
            >
              Dodaj Default
            </Button>
          </Space>
        </div>

        {/* Filters */}
        <Card size="small" className="mb-4">
          <Row gutter={16}>
            <Col span={8}>
              <Select
                placeholder="Filtriraj po vozaču"
                allowClear
                showSearch
                optionFilterProp="children"
                style={{ width: '100%' }}
                value={selectedDriver}
                onChange={setSelectedDriver}
              >
                {drivers.map((driver) => (
                  <Option key={driver.id} value={driver.id}>
                    {driver.firstName} {driver.lastName}
                  </Option>
                ))}
              </Select>
            </Col>
            <Col span={8}>
              <Select
                placeholder="Status"
                allowClear
                style={{ width: '100%' }}
                value={showActiveOnly ? 'active' : showActiveOnly === false ? 'inactive' : undefined}
                onChange={(val) => setShowActiveOnly(val === 'active' ? true : val === 'inactive' ? false : undefined as any)}
              >
                <Option value="active">Samo aktivni</Option>
                <Option value="inactive">Samo neaktivni</Option>
              </Select>
            </Col>
            <Col span={8}>
              <Select
                placeholder="Način kreiranja"
                allowClear
                style={{ width: '100%' }}
                value={
                  showAutoGeneratedOnly === true
                    ? 'auto'
                    : showAutoGeneratedOnly === false
                    ? 'manual'
                    : undefined
                }
                onChange={(val) =>
                  setShowAutoGeneratedOnly(
                    val === 'auto' ? true : val === 'manual' ? false : undefined,
                  )
                }
              >
                <Option value="auto">Samo auto-generisani</Option>
                <Option value="manual">Samo ručno kreirani</Option>
              </Select>
            </Col>
          </Row>
        </Card>

        {/* Statistics */}
        <Row gutter={16} className="mb-4">
          <Col span={6}>
            <Card size="small">
              <Statistic title="Ukupno Defaults" value={defaults.length} />
            </Card>
          </Col>
          <Col span={6}>
            <Card size="small">
              <Statistic
                title="Aktivni"
                value={defaults.filter((d) => d.isActive).length}
                valueStyle={{ color: '#3f8600' }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card size="small">
              <Statistic
                title="Auto-generisani"
                value={defaults.filter((d) => d.autoGenerated).length}
                valueStyle={{ color: '#722ed1' }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card size="small">
              <Statistic
                title="Ručno kreirani"
                value={defaults.filter((d) => !d.autoGenerated).length}
                valueStyle={{ color: '#1890ff' }}
              />
            </Card>
          </Col>
        </Row>

        {/* Table */}
        <Table
          columns={columns}
          dataSource={filteredDefaults}
          rowKey="id"
          loading={loading}
          pagination={{
            defaultPageSize: 10,
            showSizeChanger: true,
            showTotal: (total) => `Ukupno ${total} defaults`,
          }}
        />
      </Card>

      {/* Create Modal */}
      <Modal
        title="Kreiraj Default Turnus"
        open={isCreateModalVisible}
        onCancel={() => {
          setIsCreateModalVisible(false);
          createForm.resetFields();
        }}
        onOk={() => createForm.submit()}
        width={600}
      >
        <Form form={createForm} layout="vertical" onFinish={handleCreate}>
          <Form.Item
            name="driverId"
            label="Vozač"
            rules={[{ required: true, message: 'Vozač je obavezan' }]}
          >
            <Select
              placeholder="Izaberite vozača"
              showSearch
              optionFilterProp="children"
            >
              {drivers.map((driver) => (
                <Option key={driver.id} value={driver.id}>
                  {driver.firstName} {driver.lastName}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="turnusName"
            label="Turnus"
            rules={[{ required: true, message: 'Turnus je obavezan' }]}
          >
            <Input placeholder="npr. 00018-1" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="lineNumberForDisplay" label="Linija (opciono)">
                <Input placeholder="npr. 18" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="shiftNumber" label="Smena (opciono)">
                <InputNumber placeholder="1 ili 2" min={1} max={2} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item name="dayOfWeek" label="Dan u nedelji (opciono)">
            <Select placeholder="Izaberite dan" allowClear>
              {DAYS_OF_WEEK.map((day) => (
                <Option key={day} value={day}>
                  {day}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="priority" label="Prioritet (opciono)">
                <InputNumber
                  placeholder="10-200"
                  min={10}
                  max={200}
                  style={{ width: '100%' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="isActive" label="Aktivan" valuePropName="checked" initialValue={true}>
                <Switch />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item name="note" label="Napomena (opciono)">
            <Input.TextArea rows={3} placeholder="Dodatne napomene..." />
          </Form.Item>
        </Form>
      </Modal>

      {/* Edit Modal */}
      <Modal
        title="Izmeni Default Turnus"
        open={isEditModalVisible}
        onCancel={() => {
          setIsEditModalVisible(false);
          setEditingDefault(null);
          editForm.resetFields();
        }}
        onOk={() => editForm.submit()}
        width={600}
      >
        <Form form={editForm} layout="vertical" onFinish={handleEdit}>
          <Form.Item name="driverId" label="Vozač" rules={[{ required: true }]}>
            <Select placeholder="Izaberite vozača" showSearch optionFilterProp="children">
              {drivers.map((driver) => (
                <Option key={driver.id} value={driver.id}>
                  {driver.firstName} {driver.lastName}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item name="turnusName" label="Turnus" rules={[{ required: true }]}>
            <Input placeholder="npr. 00018-1" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="lineNumberForDisplay" label="Linija (opciono)">
                <Input placeholder="npr. 18" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="shiftNumber" label="Smena (opciono)">
                <InputNumber placeholder="1 ili 2" min={1} max={2} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item name="dayOfWeek" label="Dan u nedelji (opciono)">
            <Select placeholder="Izaberite dan" allowClear>
              {DAYS_OF_WEEK.map((day) => (
                <Option key={day} value={day}>
                  {day}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="priority" label="Prioritet (opciono)">
                <InputNumber placeholder="10-200" min={10} max={200} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="isActive" label="Aktivan" valuePropName="checked">
                <Switch />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item name="note" label="Napomena (opciono)">
            <Input.TextArea rows={3} placeholder="Dodatne napomene..." />
          </Form.Item>
        </Form>
      </Modal>

      {/* Analyze Modal */}
      <Modal
        title="Analiza Istorije Vožnji"
        open={isAnalyzeModalVisible}
        onCancel={() => {
          if (isProcessing) return;
          setIsAnalyzeModalVisible(false);
          analyzeForm.resetFields();
        }}
        onOk={() => analyzeForm.submit()}
        okButtonProps={{ disabled: isProcessing }}
        cancelButtonProps={{ disabled: isProcessing }}
        width={600}
      >
        <Alert
          message="Analiza će pregledati date_travel_order tabelu i identifikovati patterns"
          description="Sistem će analizirati koje turnuse vozač najčešće vozi i dati preporuke za kreiranje defaults."
          type="info"
          showIcon
          className="mb-4"
        />
        <Form form={analyzeForm} layout="vertical" onFinish={handleAnalyze}>
          <Form.Item
            name="dateRange"
            label="Period Analize"
            rules={[{ required: true, message: 'Period je obavezan' }]}
          >
            <RangePicker
              style={{ width: '100%' }}
              format="YYYY-MM-DD"
              placeholder={['Od', 'Do']}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="source" label="Izvor podataka" initialValue="mysql">
                <Select
                  placeholder="Izaberite izvor"
                  onChange={(value) => {
                    setSelectedSource(value as DataSource);
                    if (value === 'mysql') {
                      analyzeForm.setFieldValue('legacyDatabaseId', undefined);
                    }
                  }}
                >
                  <Option value="mysql">Naš MySQL</Option>
                  <Option value="legacy">Legacy Baza (Gradski Sever)</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="lineNumber" label="Linija (opciono - prazno za sve)">
                <Select
                  placeholder="Sve linije"
                  allowClear
                  showSearch
                  optionFilterProp="children"
                >
                  {lines.map((line) => (
                    <Option key={line} value={line}>
                      {line}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          {selectedSource === 'legacy' && (
            <Form.Item
              name="legacyDatabaseId"
              label="Legacy Baza"
              rules={[{ required: selectedSource === 'legacy', message: 'Legacy baza je obavezna' }]}
            >
              <Select placeholder="Izaberite legacy bazu">
                {legacyDatabases.map((db) => (
                  <Option key={db.id} value={db.id}>
                    {db.name} ({db.database}@{db.host})
                  </Option>
                ))}
              </Select>
            </Form.Item>
          )}

          <Form.Item name="driverId" label="Vozač (opciono - prazno za sve)">
            <Select placeholder="Svi vozači" allowClear showSearch optionFilterProp="children">
              {drivers.map((driver) => (
                <Option key={driver.id} value={driver.id}>
                  {driver.firstName} {driver.lastName}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="minUsageCount"
                label="Min. broj korišćenja"
                initialValue={5}
              >
                <InputNumber min={1} max={100} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="minConfidenceScore"
                label="Min. confidence (%)"
                initialValue={70}
              >
                <InputNumber min={0} max={100} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
        </Form>
      </Modal>

      {/* Generate Modal */}
      <Modal
        title="Auto-generisanje Defaults"
        open={isGenerateModalVisible}
        onCancel={() => {
          if (isProcessing) return;
          setIsGenerateModalVisible(false);
          generateForm.resetFields();
        }}
        onOk={() => generateForm.submit()}
        okButtonProps={{ disabled: isProcessing }}
        cancelButtonProps={{ disabled: isProcessing }}
        width={600}
      >
        <Alert
          message="VAŽNO: Ova akcija će automatski kreirati defaults"
          description="Sistem će analizirati istoriju i automatski kreirati default turnuse za vozače koji ispunjavaju kriterijume. Existing defaults neće biti obrisani."
          type="warning"
          showIcon
          className="mb-4"
        />
        <Form form={generateForm} layout="vertical" onFinish={handleGenerate}>
          <Form.Item
            name="dateRange"
            label="Period Analize"
            rules={[{ required: true, message: 'Period je obavezan' }]}
          >
            <RangePicker
              style={{ width: '100%' }}
              format="YYYY-MM-DD"
              placeholder={['Od', 'Do']}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="source" label="Izvor podataka" initialValue="mysql">
                <Select
                  placeholder="Izaberite izvor"
                  onChange={(value) => {
                    setSelectedSource(value as DataSource);
                    if (value === 'mysql') {
                      generateForm.setFieldValue('legacyDatabaseId', undefined);
                    }
                  }}
                >
                  <Option value="mysql">Naš MySQL</Option>
                  <Option value="legacy">Legacy Baza (Gradski Sever)</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="lineNumber" label="Linija (opciono - prazno za sve)">
                <Select
                  placeholder="Sve linije"
                  allowClear
                  showSearch
                  optionFilterProp="children"
                >
                  {lines.map((line) => (
                    <Option key={line} value={line}>
                      {line}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          {selectedSource === 'legacy' && (
            <Form.Item
              name="legacyDatabaseId"
              label="Legacy Baza"
              rules={[{ required: selectedSource === 'legacy', message: 'Legacy baza je obavezna' }]}
            >
              <Select placeholder="Izaberite legacy bazu">
                {legacyDatabases.map((db) => (
                  <Option key={db.id} value={db.id}>
                    {db.name} ({db.database}@{db.host})
                  </Option>
                ))}
              </Select>
            </Form.Item>
          )}

          <Form.Item name="driverId" label="Vozač (opciono - prazno za sve)">
            <Select placeholder="Svi vozači" allowClear showSearch optionFilterProp="children">
              {drivers.map((driver) => (
                <Option key={driver.id} value={driver.id}>
                  {driver.firstName} {driver.lastName}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="minUsageCount"
                label="Min. broj korišćenja"
                initialValue={5}
              >
                <InputNumber min={1} max={100} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="minConfidenceScore"
                label="Min. confidence (%)"
                initialValue={70}
              >
                <InputNumber min={0} max={100} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
        </Form>
      </Modal>

      {/* Analysis Results Modal */}
      <Modal
        title="Rezultati Analize"
        open={isAnalysisResultsVisible}
        onCancel={() => setIsAnalysisResultsVisible(false)}
        width={1000}
        footer={[
          <Button key="close" onClick={() => setIsAnalysisResultsVisible(false)}>
            Zatvori
          </Button>,
        ]}
      >
        <Alert
          message={`Pronađeno ${analysisResults.length} kandidata za defaults`}
          type="success"
          showIcon
          className="mb-4"
        />
        <Table
          columns={analysisColumns}
          dataSource={analysisResults}
          rowKey={(record) => `${record.driverId}-${record.turnusName}-${record.lineNumber}-${record.shiftNumber}-${record.dayOfWeek}`}
          pagination={{ defaultPageSize: 10, showTotal: (total) => `Ukupno ${total}` }}
        />
      </Modal>

      {/* Processing Modal */}
      <Modal
        title="Obrada u toku"
        open={isProcessing}
        closable={false}
        maskClosable={false}
        footer={null}
        width={500}
      >
        <div className="text-center py-8">
          <Spin
            indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />}
            size="large"
          />
          <div className="mt-6 mb-4">
            <Text className="text-lg font-medium">{processingStatus}</Text>
          </div>
          <Progress percent={100} status="active" showInfo={false} />
          <div className="mt-4">
            <Alert
              message="Molimo sačekajte"
              description="Sistem obrađuje veliki broj podataka. Ova operacija može potrajati nekoliko minuta. Ne zatvarajte prozor."
              type="info"
              showIcon
            />
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default TurnusDefaults;
