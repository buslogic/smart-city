# Universal Build stage - NO Prisma generate during build
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including ts-node for seed)
RUN npm ci --only=production && \
    npm install -g @nestjs/cli prisma && \
    npm install --save-dev ts-node typescript @types/node

# Copy source code (including prisma folder)
COPY . .

# Build the application WITHOUT Prisma generate
# Prisma client will be generated at runtime with correct DATABASE_URL
RUN npm run build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install dumb-init for proper signal handling, openssh-client for legacy server, and postgresql-client
RUN apk add --no-cache dumb-init openssh-client postgresql-client mysql-client bash

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Create required directories
RUN mkdir -p /app/uploads /app/scripts /home/nestjs/.ssh && \
    chown -R nestjs:nodejs /app/uploads && \
    chown -R nestjs:nodejs /app/scripts && \
    chown -R nestjs:nodejs /home/nestjs/.ssh && \
    chmod 700 /home/nestjs/.ssh && \
    chmod 755 /app/scripts

# Copy built application from builder
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/tsconfig.json ./tsconfig.json

# Copy import scripts
COPY --chown=nestjs:nodejs scripts/fast-import-gps-to-timescale-production.sh /app/scripts/
RUN chmod +x /app/scripts/*.sh

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3010

# Health check - disabled by default since Prisma client needs to be generated first
# HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
#   CMD node -e "require('http').get('http://localhost:3010/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"

# Start with runtime Prisma generation
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "npx prisma generate && exec node dist/src/main"]