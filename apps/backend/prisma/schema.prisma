generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  firstName                String                     @map("first_name")
  lastName                 String                     @map("last_name")
  password                 String
  isActive                 Boolean                    @default(true) @map("is_active")
  refreshToken             String?                    @map("refresh_token") @db.Text
  lastLoginAt              DateTime?                  @map("last_login_at")
  createdAt                DateTime                   @default(now()) @map("created_at")
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  avatar                   String?                    @db.Text
  legacyId                 Int?                       @unique @map("legacy_id")
  userGroupId              Int?                       @map("user_group_id")
  userGroup                UserGroup?                 @relation("UserToUserGroup", fields: [userGroupId], references: [id])
  createdApiKeys           ApiKey[]                   @relation("ApiKeyCreator")
  revokedApiKeys           ApiKey[]                   @relation("ApiKeyRevoker")
  drivingAnalysisLogs      DrivingAnalysisLog[]
  createdEmailTemplates    EmailTemplate[]            @relation("EmailTemplateCreator")
  updatedEmailTemplates    EmailTemplate[]            @relation("EmailTemplateUpdater")
  gpsSyncLogs              GpsSyncLog[]
  safetyScoreConfigHistory SafetyScoreConfigHistory[]
  sessions                 Session[]
  dashboardConfig          UserDashboardConfig?
  roles                    UserRole[]
  vehicleSyncLogs          VehicleSyncLog[]

  @@index([email])
  @@index([userGroupId])
  @@index([legacyId])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent") @db.Text
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  resource      String
  action        String
  description   String?
  menuOrder     BigInt?          @map("menu_order")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  category      String?          @db.VarChar(50)
  descriptionSr String?          @map("description_sr") @db.Text
  requiredFor   String?          @map("required_for") @db.Text
  uiRoute       String?          @map("ui_route") @db.VarChar(255)
  roles         RolePermission[]

  @@unique([resource, action])
  @@index([category])
  @@index([uiRoute])
  @@index([menuOrder])
  @@map("permissions")
}

model UserRole {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy Int?     @map("assigned_by")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model RolePermission {
  roleId       Int
  permissionId Int
  grantedAt    DateTime   @default(now()) @map("granted_at")
  grantedBy    Int?       @map("granted_by")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model LegacyDatabase {
  id                 Int                  @id @default(autoincrement())
  name               String
  type               String
  host               String
  port               Int
  database           String
  username           String
  password           String
  isActive           Boolean              @default(true) @map("is_active")
  testConnection     Boolean              @default(false) @map("test_connection")
  lastConnectionTest DateTime?            @map("last_connection_test")
  connectionError    String?              @map("connection_error") @db.Text
  description        String?
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  subtype            String?
  tableMappings      LegacyTableMapping[]

  @@map("legacy_databases")
}

model LegacyTableMapping {
  id               Int            @id @default(autoincrement())
  legacyDatabaseId Int            @map("legacy_database_id")
  legacyTableName  String         @map("legacy_table_name")
  localTableName   String         @map("local_table_name")
  mappingType      String         @default("one_way") @map("mapping_type")
  syncEnabled      Boolean        @default(false) @map("sync_enabled")
  syncFrequency    String?        @map("sync_frequency")
  lastSyncAt       DateTime?      @map("last_sync_at")
  lastSyncStatus   String?        @map("last_sync_status")
  lastSyncMessage  String?        @map("last_sync_message") @db.Text
  mappingConfig    String?        @map("mapping_config") @db.Text
  description      String?
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  legacyDatabase   LegacyDatabase @relation(fields: [legacyDatabaseId], references: [id], onDelete: Cascade)

  @@unique([legacyDatabaseId, legacyTableName, localTableName])
  @@index([legacyDatabaseId])
  @@map("legacy_table_mappings")
}

model BusVehicle {
  id                    Int                    @id @default(autoincrement())
  legacyId              Int?                   @unique @map("legacy_id")
  garageNumber          String                 @unique @map("garage_number")
  registrationNumber    String?                @map("registration_number")
  vehicleNumber         String?                @map("vehicle_number")
  vehicleType           Int?                   @map("vehicle_type")
  vehicleBrand          Int?                   @map("vehicle_brand")
  vehicleModel          Int?                   @map("vehicle_model")
  chassisNumber         String?                @map("chassis_number") @db.VarChar(50)
  motorNumber           String?                @map("motor_number") @db.VarChar(50)
  yearOfManufacture     DateTime?              @map("year_of_manufacture")
  seatCapacity          Int                    @default(0) @map("seat_capacity")
  standingCapacity      Int                    @default(0) @map("standing_capacity")
  totalCapacity         Int                    @default(0) @map("total_capacity")
  fuelType              Int?                   @map("fuel_type")
  active                Boolean                @default(true)
  visible               Boolean                @default(true)
  wifi                  Boolean                @default(false)
  airCondition          Boolean                @default(false) @map("air_condition")
  rampForDisabled       Boolean                @default(false) @map("ramp_for_disabled")
  videoSystem           Boolean                @default(false) @map("video_system")
  lowFloor              Boolean                @default(false) @map("low_floor")
  imei                  String?                @db.VarChar(20)
  imeiNet               String?                @map("imei_net") @db.VarChar(20)
  gpsModel              String?                @map("gps_model") @db.VarChar(100)
  technicalControlFrom  DateTime?              @map("technical_control_from")
  technicalControlTo    DateTime?              @map("technical_control_to")
  registrationValidTo   DateTime?              @map("registration_valid_to")
  firstRegistrationDate DateTime?              @map("first_registration_date")
  centralPointId        Int?                   @map("central_point_id")
  centralPointName      String?                @map("central_point_name") @db.VarChar(200)
  note                  String?                @db.Text
  imageUrl              String?                @map("image_url") @db.VarChar(500)
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  lastSyncAt            DateTime?              @map("last_sync_at")
  gpsCurrentData        LegacyCityGpsCurrent[]
  smartSlowSyncVehicle  SmartSlowSyncVehicle?

  @@index([vehicleType])
  @@index([active])
  @@index([centralPointId])
  @@index([legacyId])
  @@map("bus_vehicles")
}

model VehicleSyncLog {
  id               Int                 @id @default(autoincrement())
  syncType         String              @map("sync_type")
  status           String
  startedAt        DateTime            @map("started_at")
  completedAt      DateTime?           @map("completed_at")
  totalRecords     Int                 @map("total_records")
  processedRecords Int                 @default(0) @map("processed_records")
  createdRecords   Int                 @default(0) @map("created_records")
  updatedRecords   Int                 @default(0) @map("updated_records")
  skippedRecords   Int                 @default(0) @map("skipped_records")
  errorRecords     Int                 @default(0) @map("error_records")
  errorDetails     Json?               @map("error_details")
  userId           Int                 @map("user_id")
  createdAt        DateTime            @default(now()) @map("created_at")
  syncDetails      VehicleSyncDetail[]
  user             User                @relation(fields: [userId], references: [id])

  @@index([userId], map: "vehicle_sync_logs_user_id_fkey")
  @@map("vehicle_sync_logs")
}

model VehicleSyncDetail {
  id             Int            @id @default(autoincrement())
  syncLogId      Int            @map("sync_log_id")
  legacyId       Int            @map("legacy_id")
  action         String
  changes        Json?
  conflictFields Json?          @map("conflict_fields")
  resolution     String?
  errorMessage   String?        @map("error_message") @db.Text
  createdAt      DateTime       @default(now()) @map("created_at")
  syncLog        VehicleSyncLog @relation(fields: [syncLogId], references: [id], onDelete: Cascade)

  @@index([syncLogId])
  @@index([legacyId])
  @@map("vehicle_sync_details")
}

model LegacyCityGpsCurrent {
  garageNo         String      @id @map("garage_no") @db.VarChar(15)
  lat              Decimal     @db.Decimal(11, 8)
  lng              Decimal     @db.Decimal(11, 8)
  course           Int         @db.SmallInt
  speed            Int         @db.SmallInt
  alt              Int         @db.SmallInt
  state            Int         @db.TinyInt
  lineNumber       String?     @map("line_number") @db.VarChar(5)
  tripType         Int         @map("trip_type") @db.TinyInt
  direction        Int         @db.TinyInt
  inRoute          Int         @map("in_route") @db.TinyInt
  captured         DateTime    @map("captured")
  edited           DateTime    @map("edited")
  peopleCounterIn  Int         @default(0) @map("people_counter_in")
  peopleCounterOut Int         @default(0) @map("people_counter_out")
  iotVoltage       Int?        @map("iot_voltage")
  iotIgnition      Int?        @map("iot_ignition")
  batteryStatus    Int?        @map("battery_status") @db.TinyInt
  vehicleId        Int?        @map("vehicle_id")
  lastUpdate       DateTime    @default(now()) @map("last_update")
  dataSource       String      @default("cron") @map("data_source")
  vehicle          BusVehicle? @relation(fields: [vehicleId], references: [id])

  @@index([lineNumber])
  @@index([captured])
  @@index([vehicleId])
  @@map("legacy_city_gps_current")
}

model GpsSyncLog {
  id              Int       @id @default(autoincrement())
  vehicleId       Int?      @map("vehicle_id")
  vehicleGarageNo String?   @map("vehicle_garage_no") @db.VarChar(50)
  syncStartDate   DateTime  @map("sync_start_date")
  syncEndDate     DateTime  @map("sync_end_date")
  status          String
  totalPoints     Int       @default(0) @map("total_points")
  processedPoints Int       @default(0) @map("processed_points")
  insertedPoints  Int       @default(0) @map("inserted_points")
  updatedPoints   Int       @default(0) @map("updated_points")
  skippedPoints   Int       @default(0) @map("skipped_points")
  errorPoints     Int       @default(0) @map("error_points")
  totalDistance   Float?    @map("total_distance")
  batchSize       Int       @default(1000) @map("batch_size")
  delayMs         Int       @default(3000) @map("delay_ms")
  startedAt       DateTime  @map("started_at")
  completedAt     DateTime? @map("completed_at")
  error           String?   @db.Text
  userId          Int?      @map("user_id")
  user            User?     @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([vehicleGarageNo])
  @@index([startedAt])
  @@index([userId], map: "gps_sync_logs_user_id_fkey")
  @@map("gps_sync_logs")
}

model GpsRawBuffer {
  id            BigInt    @id @default(autoincrement())
  vehicleId     Int?      @map("vehicle_id")
  garageNo      String    @map("garage_no") @db.VarChar(20)
  imei          String?   @db.VarChar(50)
  timestamp     DateTime
  lat           Decimal   @db.Decimal(10, 8)
  lng           Decimal   @db.Decimal(11, 8)
  speed         Int       @default(0)
  course        Int       @default(0)
  altitude      Int       @default(0)
  satellites    Int       @default(0)
  state         Int       @default(0)
  inRoute       Int       @default(0) @map("in_route")
  receivedAt    DateTime  @default(now()) @map("received_at")
  processedAt   DateTime? @map("processed_at")
  processStatus String    @default("pending") @map("process_status")
  retryCount    Int       @default(0) @map("retry_count")
  errorMessage  String?   @map("error_message") @db.Text
  source        String    @default("legacy") @db.VarChar(50)
  rawData       Json?     @map("raw_data")
  workerGroup   Int?      @map("worker_group") @db.TinyInt

  @@index([workerGroup, processStatus, retryCount, receivedAt], map: "idx_worker_processing")
  @@index([processStatus, retryCount, receivedAt], map: "idx_worker_select")
  @@index([processedAt, processStatus], map: "idx_cleanup")
  @@index([receivedAt], map: "idx_received_at")
  @@index([vehicleId, timestamp], map: "idx_vehicle_timestamp")
  @@map("gps_raw_buffer")
}

model GpsProcessingStats {
  id                  Int      @id @default(autoincrement())
  hourSlot            DateTime @unique @map("hour_slot")
  receivedCount       Int      @default(0) @map("received_count")
  processedCount      Int      @default(0) @map("processed_count")
  avgProcessingTimeMs Int      @default(0) @map("avg_processing_time_ms")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@index([hourSlot], map: "idx_hour_slot")
  @@map("gps_processing_stats")
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String   @db.Text
  type        String   @default("string") @db.VarChar(20)
  description String?  @db.Text
  category    String   @default("general") @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category], map: "idx_category")
  @@map("system_settings")
}

model SmartSlowSyncVehicle {
  id                   Int                    @id @default(autoincrement())
  vehicleId            Int                    @unique @map("vehicle_id")
  enabled              Boolean                @default(true)
  priority             Int                    @default(100)
  lastSyncAt           DateTime?              @map("last_sync_at")
  lastSuccessfulSyncAt DateTime?              @map("last_successful_sync_at")
  totalSyncCount       Int                    @default(0) @map("total_sync_count")
  successfulSyncCount  Int                    @default(0) @map("successful_sync_count")
  failedSyncCount      Int                    @default(0) @map("failed_sync_count")
  totalPointsProcessed BigInt                 @default(0) @map("total_points_processed")
  lastError            String?                @map("last_error") @db.Text
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  lastPointsCheck      DateTime?              @map("last_points_check")
  uniquePointsInDb     BigInt                 @default(0) @map("unique_points_in_db")
  syncHistory          SmartSlowSyncHistory[]
  vehicle              BusVehicle             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([enabled, priority], map: "idx_enabled_priority")
  @@index([lastSyncAt], map: "idx_last_sync")
  @@map("smart_slow_sync_vehicles")
}

model SmartSlowSyncHistory {
  id                 Int                  @id @default(autoincrement())
  vehicleId          Int                  @map("vehicle_id")
  batchNumber        Int                  @map("batch_number")
  syncStartDate      DateTime             @map("sync_start_date")
  syncEndDate        DateTime             @map("sync_end_date")
  status             String
  pointsProcessed    Int                  @default(0) @map("points_processed")
  processingTimeMs   Int                  @default(0) @map("processing_time_ms")
  diskSpaceUsedBytes BigInt?              @map("disk_space_used_bytes")
  compressionRatio   Float?               @map("compression_ratio")
  error              String?              @db.Text
  startedAt          DateTime             @map("started_at")
  completedAt        DateTime?            @map("completed_at")
  syncVehicle        SmartSlowSyncVehicle @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)

  @@index([vehicleId, batchNumber], map: "idx_vehicle_batch")
  @@index([status], map: "idx_status")
  @@index([startedAt], map: "idx_started_at")
  @@map("smart_slow_sync_history")
}

model SmartSlowSyncBatch {
  id                   Int       @id @default(autoincrement())
  batchNumber          Int       @unique @map("batch_number")
  vehicleIds           Json      @map("vehicle_ids")
  totalVehicles        Int       @map("total_vehicles")
  processedVehicles    Int       @default(0) @map("processed_vehicles")
  status               String    @default("pending")
  totalPointsProcessed BigInt    @default(0) @map("total_points_processed")
  startedAt            DateTime? @map("started_at")
  completedAt          DateTime? @map("completed_at")
  processingTimeMs     Int       @default(0) @map("processing_time_ms")
  error                String?   @db.Text
  createdAt            DateTime  @default(now()) @map("created_at")

  @@index([status], map: "idx_batch_status")
  @@index([batchNumber], map: "idx_batch_number")
  @@map("smart_slow_sync_batches")
}

model SafetyScoreConfig {
  id                  Int                        @id @default(autoincrement())
  eventType           String                     @map("event_type") @db.VarChar(50)
  severity            String                     @db.VarChar(20)
  thresholdEvents     Int                        @map("threshold_events")
  thresholdDistanceKm Int                        @map("threshold_distance_km")
  penaltyPoints       Decimal                    @map("penalty_points") @db.Decimal(5, 2)
  penaltyMultiplier   Decimal                    @map("penalty_multiplier") @db.Decimal(5, 2)
  maxPenalty          Decimal?                   @map("max_penalty") @db.Decimal(5, 2)
  description         String?                    @db.Text
  isActive            Boolean                    @default(true) @map("is_active")
  createdAt           DateTime                   @default(now()) @map("created_at")
  updatedAt           DateTime                   @updatedAt @map("updated_at")
  history             SafetyScoreConfigHistory[]

  @@unique([eventType, severity])
  @@map("safety_score_config")
}

model SafetyScoreConfigHistory {
  id         Int               @id @default(autoincrement())
  configId   Int               @map("config_id")
  changedBy  Int?              @map("changed_by")
  changeType String            @map("change_type") @db.VarChar(20)
  oldValues  Json?             @map("old_values")
  newValues  Json?             @map("new_values")
  changedAt  DateTime          @default(now()) @map("changed_at")
  user       User?             @relation(fields: [changedBy], references: [id])
  config     SafetyScoreConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([changedBy], map: "safety_score_config_history_changed_by_fkey")
  @@index([configId], map: "safety_score_config_history_config_id_fkey")
  @@map("safety_score_config_history")
}

model SafetyScoreGlobalConfig {
  id             Int      @id @default(autoincrement())
  parameterName  String   @unique @map("parameter_name") @db.VarChar(100)
  parameterValue Decimal  @map("parameter_value") @db.Decimal(10, 2)
  description    String?  @db.Text
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("safety_score_global_config")
}

model UserDashboardConfig {
  id        Int                   @id @default(autoincrement())
  userId    Int                   @unique @map("user_id")
  config    Json
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets   UserDashboardWidget[]

  @@map("user_dashboard_configs")
}

model UserDashboardWidget {
  id              Int                 @id @default(autoincrement())
  configId        Int                 @map("config_id")
  widgetId        String              @map("widget_id") @db.VarChar(50)
  enabled         Boolean             @default(true)
  order           Int                 @default(0)
  config          Json
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  dashboardConfig UserDashboardConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([configId, widgetId])
  @@index([configId])
  @@map("user_dashboard_widgets")
}

model GpsBatchHistory {
  id                  String         @id @default(uuid())
  batchNumber         Int            @map("batch_number")
  startedAt           DateTime       @map("started_at")
  completedAt         DateTime?      @map("completed_at")
  status              String         @db.VarChar(20)
  batchSize           Int            @map("batch_size")
  actualProcessed     Int            @default(0) @map("actual_processed")
  failedRecords       Int            @default(0) @map("failed_records")
  workerCount         Int            @map("worker_count")
  workerDetails       Json?          @map("worker_details")
  totalDurationMs     Int?           @map("total_duration_ms")
  avgRecordsPerSecond Float?         @map("avg_records_per_second")
  sourceTable         String?        @map("source_table") @db.VarChar(50)
  cronInterval        Int?           @map("cron_interval")
  errorMessage        String?        @map("error_message") @db.Text
  errorDetails        Json?          @map("error_details")
  processedBy         String?        @map("processed_by") @db.VarChar(100)
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  workerLogs          GpsWorkerLog[]

  @@index([startedAt])
  @@index([status])
  @@index([batchNumber])
  @@map("gps_batch_history")
}

model GpsWorkerLog {
  id               String          @id @default(uuid())
  batchId          String          @map("batch_id")
  workerId         Int             @map("worker_id")
  startedAt        DateTime        @map("started_at")
  completedAt      DateTime?       @map("completed_at")
  durationMs       Int?            @map("duration_ms")
  status           String          @db.VarChar(20)
  recordsAssigned  Int             @map("records_assigned")
  recordsProcessed Int             @default(0) @map("records_processed")
  recordsFailed    Int             @default(0) @map("records_failed")
  recordsPerSecond Float?          @map("records_per_second")
  chunkSize        Int?            @map("chunk_size")
  offset           Int?            @map("offset")
  processingSteps  Json?           @map("processing_steps")
  errorMessage     String?         @map("error_message") @db.Text
  errorStack       String?         @map("error_stack") @db.Text
  failedIds        Json?           @map("failed_ids")
  processedBy      String?         @map("processed_by") @db.VarChar(100)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  batch            GpsBatchHistory @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([workerId])
  @@index([startedAt])
  @@index([status])
  @@map("gps_worker_logs")
}

model DrivingAnalysisLog {
  id                  Int       @id @default(autoincrement())
  userId              Int       @map("user_id")
  vehicleIds          Json      @map("vehicle_ids")
  startDate           DateTime  @map("start_date")
  endDate             DateTime  @map("end_date")
  totalVehicles       Int       @map("total_vehicles")
  processedVehicles   Int       @default(0) @map("processed_vehicles")
  totalEventsDetected Int       @default(0) @map("total_events_detected")
  totalEventsBefore   Int       @default(0) @map("total_events_before")
  status              String    @default("pending") @map("status") @db.VarChar(50)
  strategy            String    @default("daily") @map("strategy") @db.VarChar(20)
  clearExisting       Boolean   @default(false) @map("clear_existing")
  startedAt           DateTime? @map("started_at")
  completedAt         DateTime? @map("completed_at")
  errorMessage        String?   @map("error_message") @db.Text
  vehicleProgress     Json?     @map("vehicle_progress")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@map("driving_analysis_logs")
}

model ApiKey {
  id           Int         @id @default(autoincrement())
  key          String      @unique
  keyHash      String      @unique @map("key_hash")
  displayKey   String      @map("display_key") @db.VarChar(10)
  name         String
  description  String?     @db.Text
  type         ApiKeyType  @default(API_ACCESS)
  permissions  Json?
  allowedIps   Json?       @map("allowed_ips")
  rateLimit    Int?        @default(1000) @map("rate_limit")
  expiresAt    DateTime?   @map("expires_at")
  lastUsedAt   DateTime?   @map("last_used_at")
  lastUsedIp   String?     @map("last_used_ip")
  usageCount   Int         @default(0) @map("usage_count")
  isActive     Boolean     @default(true) @map("is_active")
  revokedAt    DateTime?   @map("revoked_at")
  revokedBy    Int?        @map("revoked_by")
  revokeReason String?     @map("revoke_reason")
  createdBy    Int         @map("created_by")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  logs         ApiKeyLog[]
  creator      User        @relation("ApiKeyCreator", fields: [createdBy], references: [id])
  revoker      User?       @relation("ApiKeyRevoker", fields: [revokedBy], references: [id])

  @@index([isActive])
  @@index([type])
  @@index([expiresAt])
  @@index([createdBy])
  @@index([revokedBy])
  @@map("api_keys")
}

model ApiKeyLog {
  id           Int      @id @default(autoincrement())
  apiKeyId     Int      @map("api_key_id")
  action       String
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent") @db.Text
  endpoint     String?  @db.VarChar(500)
  method       String?  @db.VarChar(10)
  responseCode Int?     @map("response_code")
  responseTime Int?     @map("response_time")
  errorMessage String?  @map("error_message") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId])
  @@index([action])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("api_key_logs")
}

model EmailTemplate {
  id         String    @id @default(uuid())
  name       String
  slug       String    @unique
  subject    String
  body       String    @db.Text
  bodyHtml   String?   @map("body_html") @db.Text
  category   String    @default("general")
  variables  Json?
  isActive   Boolean   @default(true) @map("is_active")
  usageCount Int       @default(0) @map("usage_count")
  lastUsedAt DateTime? @map("last_used_at")
  createdBy  Int       @map("created_by")
  updatedBy  Int?      @map("updated_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  creator    User      @relation("EmailTemplateCreator", fields: [createdBy], references: [id])
  updater    User?     @relation("EmailTemplateUpdater", fields: [updatedBy], references: [id])

  @@index([slug])
  @@index([category])
  @@index([isActive])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("email_templates")
}

model CompanyInfo {
  id          Int      @id @default(autoincrement())
  companyName String   @map("company_name")
  taxId       String   @map("tax_id")
  address     String
  phone       String
  email       String
  bankAccount String   @map("bank_account")
  bankName    String   @map("bank_name")
  website     String?
  logo        String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("company_info")
}

model UserGroup {
  id          Int      @id @default(autoincrement())
  groupName   String   @unique @map("group_name") @db.VarChar(100)
  driver      Boolean  @default(false) @map("driver")
  userClass   Int      @default(1) @map("user_class")
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  syncEnabled Boolean  @default(false) @map("sync_enabled")
  legacyId    Int?     @unique @map("legacy_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]   @relation("UserToUserGroup")

  @@index([groupName])
  @@index([driver])
  @@index([userClass])
  @@index([syncEnabled])
  @@index([legacyId])
  @@map("user_groups")
}

enum ApiKeyType {
  SWAGGER_ACCESS
  API_ACCESS
  ADMIN_ACCESS
  INTEGRATION
}

model CentralPoint {
  id Int @id @default(autoincrement())

  // Osnovne informacije
  name    String @map("cp_name") @db.VarChar(400)
  address String @map("cp_address") @db.VarChar(400)
  zip     String @map("cp_zip") @db.VarChar(10)
  city    String @map("cp_city") @db.VarChar(100)

  // Kontakt informacije
  phone1 String @map("cp_phone1") @db.VarChar(50)
  phone2 String @map("cp_phone2") @db.VarChar(50)
  email  String @map("cp_email") @db.VarChar(255)

  // Boss informacije
  boss      String @map("cp_boss") @db.VarChar(200)
  bossPhone String @map("cp_boss_phone") @db.VarChar(50)
  bossEmail String @map("cp_boss_email") @db.VarChar(255)

  // Geografija
  mainStationUid String @map("main_station_uid") @db.VarChar(6)
  longitude      String @map("cp_longitude") @db.VarChar(50)
  latitude       String @map("cp_latitude") @db.VarChar(50)

  // Komentar
  comment String @map("cp_comment") @db.VarChar(400)

  // Finansije
  owes                      Float  @map("cp_owes") @db.Float
  expects                   Float  @map("cp_expects") @db.Float
  saldo                     Float  @map("cp_saldo") @db.Float
  incomeSettlementTimeframe String @default("0") @map("income_settlement_timeframe_cp") @db.VarChar(10)

  // Audit trail
  changedBy String   @map("changed_by") @db.VarChar(100)
  dateTime  DateTime @map("date_time") @db.DateTime(0)

  // Java/Applet settings
  enableJavaApplet        Boolean @default(false) @map("enablejavaapplet")
  enableTicketReturn      Int     @default(0) @map("enableticketreturn") @db.SmallInt
  enableTicketDelete      Boolean @default(false) @map("enableticketdelete")
  enableOtherTicketsCheck Boolean @default(true) @map("enableotherticketscheck")
  enableJournalCheck      Int     @default(1) @map("enablejournalcheck") @db.TinyInt

  // Fuel
  internalFuel Boolean? @map("internal_fuel")

  // UI/Display
  color        String @map("cp_color") @db.VarChar(7)
  lineColor    String @map("cp_line_color") @db.VarChar(7)
  image        Bytes? @map("cp_image") @db.MediumBlob
  imageAndroid Bytes? @map("cp_image_android") @db.MediumBlob

  // Customer info images
  customerInfoCloseDeparture Bytes? @map("cp_customer_info_close_departure") @db.MediumBlob
  customerInfoOpenDeparture  Bytes? @map("cp_customer_info_open_departure") @db.MediumBlob
  validatorCloseDeparture    Bytes? @map("cp_validator_close_departure") @db.MediumBlob
  validatorOpenDeparture     Bytes? @map("cp_validator_open_departure") @db.MediumBlob

  // Android settings
  sendAndroidPinRequestToAdmin Int    @default(0) @map("send_android_pin_request_to_admin") @db.TinyInt
  androidAdmin                 BigInt @default(0) @map("android_admin")

  // Country/VAT info
  countryId   Int     @default(0) @map("cp_country_id")
  countryName String? @map("cp_country_name") @db.VarChar(50)
  vatId       String? @map("cp_vat_id") @db.VarChar(15)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Additional settings
  otherCpView       Int     @default(0) @map("other_cp_view") @db.UnsignedTinyInt
  dispatchOrderByCp Int     @default(0) @map("dispatch_order_by_cp") @db.UnsignedTinyInt
  active            Boolean @default(false)

  // Invoice/Account info
  placeOfInvoice           String? @map("place_of_the_invoice") @db.VarChar(100)
  currentAccount           String? @map("current_account") @db.VarChar(100)
  currentAccountForPlastic String? @map("current_account_for_plastic") @db.VarChar(100)

  // Depot
  depotCode String? @map("depot_code") @db.VarChar(20)

  // GTFS
  creatingZipByGtfsStandard Boolean @default(false) @map("creating_zip_by_gtfs_starndard")

  // Device list
  defaultDeviceListSubgroupId Int? @map("default_device_list_subgroup_id")

  @@index([mainStationUid])
  @@index([active])
  @@index([depotCode])
  @@map("central_points")
}
